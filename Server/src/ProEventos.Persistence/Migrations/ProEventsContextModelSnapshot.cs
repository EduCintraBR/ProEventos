// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using ProEventos.Persistence.Contexts;
using System;

namespace ProEventos.Persistence.Migrations
{
    [DbContext(typeof(ProEventsContext))]
    partial class ProEventsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("ProEventos.Domain.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinalDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InitialDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmntPeople")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.EventPanelist", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "PanelistId");

                    b.HasIndex("PanelistId");

                    b.ToTable("EventsPanelists");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Panelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Panelists");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.SocialNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PanelistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PanelistId");

                    b.ToTable("SocialNetworks");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Batch", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Event", "Event")
                        .WithMany("Batch")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.EventPanelist", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Event", "Event")
                        .WithMany("EventsPanelists")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProEventos.Domain.Entities.Panelist", "Panelist")
                        .WithMany("EventsPanelists")
                        .HasForeignKey("PanelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Panelist");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.SocialNetwork", b =>
                {
                    b.HasOne("ProEventos.Domain.Entities.Event", "Event")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("EventId");

                    b.HasOne("ProEventos.Domain.Entities.Panelist", "Panelist")
                        .WithMany("SocialNetworks")
                        .HasForeignKey("PanelistId");

                    b.Navigation("Event");

                    b.Navigation("Panelist");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Event", b =>
                {
                    b.Navigation("Batch");

                    b.Navigation("EventsPanelists");

                    b.Navigation("SocialNetworks");
                });

            modelBuilder.Entity("ProEventos.Domain.Entities.Panelist", b =>
                {
                    b.Navigation("EventsPanelists");

                    b.Navigation("SocialNetworks");
                });
#pragma warning restore 612, 618
        }
    }
}
